<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:MetroControls="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Views="clr-namespace:MbitGate"
                    xmlns:Input="clr-namespace:System.Windows.Input;assembly=PresentationCore">

    <!-- the metro theme style -->
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Blue.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml" />
    </ResourceDictionary.MergedDictionaries>
    
    
    <!-- the custom style -->
    <Style x:Key="DataTimeButton" TargetType="{x:Type RadioButton}" BasedOn="{x:Null}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border x:Name="border" CornerRadius="6" Background="{TemplateBinding Background}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"  Value="True">
                            <Setter Property="Background" TargetName="border" Value="#02a8f3"/>
                        </Trigger>
                        <Trigger Property="IsChecked"  Value="false">
                            <Setter Property="Background" TargetName="border" Value="#F0F1F2"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#80d3f9"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- normal button-->
    <Style x:Key="STYLE_Button" BasedOn="{StaticResource MetroFlatButton}" TargetType="Button">
        <Setter Property="Padding" Value="0 0 0 0"/>
        <!--Setter Property="Background" Value="#F9F9F9" /-->
        <!--Setter Property="FontSize" Value="14" /-->
        <Setter Property="BorderBrush" Value="#ededed" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="#666666"/>
        <Setter Property="Background" Value="#ffffff" />
        <Setter Property="FontSize" Value="14"/>
        <Style.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="#666666" />
                <Setter Property="Background" Value="#ededed" />
                <Setter Property="Opacity" Value=".5"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="#666666" />
                <Setter Property="Background" Value="#ededed" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="#ffffff"/>
                <Setter Property="Foreground" Value="#bcbcbc"/>
                <Setter Property="BorderBrush" Value="#bcbcbc"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!--确定/修改的按钮样式-->
    <Style x:Key="Style_Button_Ok" BasedOn="{StaticResource MetroFlatButton}" TargetType="Button">
        <Setter Property="Padding" Value="0 0 0 0"/>
        <!--Setter Property="Background" Value="#F9F9F9" /-->
        <!--Setter Property="FontSize" Value="14" /-->
        <Setter Property="BorderBrush" Value="#02a8f3" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="#ffffff"/>
        <Setter Property="Background" Value="#02a8f3" />
        <Setter Property="FontSize" Value="14"/>
        <Style.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="#ffffff" />
                <Setter Property="Background" Value="#03A9F4" />
                <Setter Property="Opacity" Value=".5"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="#ffffff" />
                <Setter Property="Background" Value="#28b5f5" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource GrayBrush5}"/>
                <Setter Property="Foreground" Value="WhiteSmoke" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--style for flat toggle button like MetroFlatButton-->
    <Style x:Key="STYLE_MetroFlatToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="#9D9D9D" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Border"
                            Margin="0"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <MetroControls:ContentControlEx x:Name="PART_ContentPresenter"
                                                   Padding="{TemplateBinding Padding}"
                                                   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                   Content="{TemplateBinding Content}"
                                                   ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(MetroControls:ControlsHelper.ContentCharacterCasing)}"
                                                   ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                   ContentTemplate="{TemplateBinding ContentTemplate}"
                                                   ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                   RecognizesAccessKey="True"
                                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="#03A9F4" />
                <Setter Property="Foreground" Value="#FFFFFF" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Transparent" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="#03A9F4" />
                <Setter Property="Foreground" Value="#FFFFFF" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="#FFFFFF" />
                <Setter Property="Background" Value="#03A9F4" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="#FFFFFF" />
                <Setter Property="Background" Value="#03A9F4" />
            </MultiTrigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource GrayBrush5}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="STYLE_TabToggle" BasedOn="{StaticResource STYLE_MetroFlatToggleButton}" TargetType="ToggleButton">
        <Setter Property="Width" Value="160" />
        <Setter Property="Height" Value="48" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="#414141" />
                <Setter Property="BorderBrush" Value="#414141" />
                <Setter Property="BorderThickness" Value="1" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="#202020" />
                <Setter Property="BorderBrush" Value="#202020" />
                <Setter Property="BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="#414141" />
                <Setter Property="BorderBrush" Value="#414141" />
                <Setter Property="BorderThickness" Value="1" />
            </MultiTrigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#414141" />
            </Trigger>
            <Trigger Property="IsChecked" Value="False">
                <Setter Property="Background" Value="#202020" />
                <Setter Property="BorderBrush" Value="#202020" />
                <Setter Property="BorderThickness" Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="STYLE_ViewToggle" BasedOn="{StaticResource STYLE_MetroFlatToggleButton}" TargetType="ToggleButton">
        <Setter Property="Width" Value="100" />
        <Setter Property="Height" Value="30" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Padding" Value="0" />
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="#03A9F4" />
                <Setter Property="BorderBrush" Value="#BCBCBC" />
                <Setter Property="BorderThickness" Value="0" />
            </Trigger>
            
            <Trigger Property="IsChecked" Value="False">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="#BCBCBC"/>
                <Setter Property="BorderThickness" Value="1" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="#BCBCBC" />
                <Setter Property="BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="#03A9F4" />
                <Setter Property="BorderBrush" Value="#BCBCBC" />
                <Setter Property="BorderThickness" Value="0" />
            </MultiTrigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#03A9F4" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="STYLE_ArrangeSquareToggle" BasedOn="{StaticResource STYLE_MetroFlatToggleButton}" TargetType="ToggleButton">
        <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Padding" Value="0 0 0 0" />
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="#03A9F4" />
                <Setter Property="BorderBrush" Value="#BCBCBC" />
                <Setter Property="BorderThickness" Value="0" />
                <!--Setter Property="Content">
                    <Setter.Value>
                        <Image Source="../image/view/ic_view_square_unselected.png" />
                    </Setter.Value>
                </-->
            </Trigger>

            <Trigger Property="IsChecked" Value="False">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="#BCBCBC"/>
                <Setter Property="BorderThickness" Value="1" />
                <!--Setter Property="Content">
                    <Setter.Value>
                        <Image Source="../image/view/ic_view_square_unselected.png" />
                    </Setter.Value>
                </-->
            </Trigger>

            <!--MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="#BCBCBC" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Content">
                    <Setter.Value>
                        <Image Source="../image/view/ic_view_square_unselected.png" />
                    </Setter.Value>
                </Setter>
            </>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="#03A9F4" />
                <Setter Property="BorderBrush" Value="#BCBCBC" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Content">
                    <Setter.Value>
                        <Image Source="../image/view/ic_view_square_selected.png" />
                    </Setter.Value>
                </Setter>
            </MultiTrigger-->
            
            <!--Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#03A9F4" />
                <Setter Property="BorderBrush" Value="#BCBCBC" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Content">
                    <Setter.Value>
                        <Image Source="../image/view/ic_view_square_selected.png" />
                    </Setter.Value>
                </Setter>
            </>

            <Trigger Property="IsPressed" Value="False">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="#BCBCBC"/>
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Content">
                    <Setter.Value>
                        <Image Source="../image/view/ic_view_square_unselected.png" />
                    </Setter.Value>
                </Setter>
            </Trigger-->

            <!--MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="#BCBCBC" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Content">
                    <Setter.Value>
                        <Image Source="../image/view/ic_view_square_unselected.png" />
                    </Setter.Value>
                </>
            </>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="#03A9F4" />
                <Setter Property="BorderBrush" Value="#BCBCBC" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Content">
                    <Setter.Value>
                        <Image Source="../image/view/ic_view_square_selected.png" />
                    </Setter.Value>
                </>
            </MultiTrigger-->
        </Style.Triggers>
    </Style>

    <Style x:Key="STYLE_ArrangeListToggle" BasedOn="{StaticResource STYLE_MetroFlatToggleButton}" TargetType="ToggleButton">
        <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Padding" Value="0 0 0 0" />
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="#03A9F4" />
                <Setter Property="BorderBrush" Value="#BCBCBC" />
                <Setter Property="BorderThickness" Value="0" />
                <!--Setter Property="Content">
                    <Setter.Value>
                        <Image Source="../image/view/ic_view_list_unselected.png"/>
                    </Setter.Value>
                </-->
            </Trigger>

            <Trigger Property="IsChecked" Value="False">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="#BCBCBC"/>
                <Setter Property="BorderThickness" Value="1" />
                <!--Setter Property="Content">
                    <Setter.Value>
                        <Image Source="../image/view/ic_view_list_unselected.png" />
                    </Setter.Value>
                </-->
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="STYLE_SearchTimeGranularityToggle" BasedOn="{StaticResource MetroFlatToggleButton}" TargetType="ToggleButton">
        <Setter Property="Background" Value="#FFFFFF"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="#BCBCBC"/>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="#03A9F4" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="#FFFFFF" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="#03A9F4" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="#FFFFFF" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="#03A9F4" />
            </MultiTrigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource GrayBrush5}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="STYLE_IconElementButton" BasedOn="{StaticResource MetroFlatButton}" TargetType="Button">
        <Setter Property="Padding" Value="0 0 0 0"/>
        <Setter Property="Background" Value="Transparent" />
        <Style.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="#666666" />
                <Setter Property="Background" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="#666666" />
                <Setter Property="Background" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" Value="#03A9F4"/>
                <Setter Property="Opacity" Value=".05"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="STYLE_ToggleIconElementButton" BasedOn="{StaticResource MetroFlatToggleButton}" TargetType="ToggleButton">
        <Setter Property="Padding" Value="0 0 0 0"/>
        <Setter Property="Background" Value="Transparent" />
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="#03A9F4"/>
                <Setter Property="Opacity" Value=".05"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Transparent" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="#03A9F4"/>
                <Setter Property="Opacity" Value=".05"/>
            </MultiTrigger>
            
            
        </Style.Triggers>
    </Style>

    <Style x:Key="STYLE_IconElementTreeView" BasedOn="{StaticResource VirtualisedMetroTreeView}" TargetType="TreeView">
    </Style>

    <Style x:Key="STYLE_BigConfigTextBlock" BasedOn="{StaticResource MetroTextBlock}" TargetType="TextBlock">
        <Setter Property="Height" Value="30"/>
        <Setter Property="MinWidth" Value="100" />
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Foreground" Value="#333333" />
        <Setter Property="FontFamily" Value="Helvetica,冬青黑简体"/>
    </Style>

    <Style x:Key="STYLE_MediaConfigTextBlock" BasedOn="{StaticResource MetroTextBlock}" TargetType="TextBlock">
        <Setter Property="Height" Value="20"/>
        <Setter Property="MinWidth" Value="100" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Foreground" Value="#666666" />
        <Setter Property="FontFamily" Value="Helvetica,冬青黑简体"/>
    </Style>

    <Style x:Key="STYLE_SmallConfigTextBlock" BasedOn="{StaticResource MetroTextBlock}" TargetType="TextBlock">
        <Setter Property="Height" Value="10"/>
        <Setter Property="MinWidth" Value="100" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Foreground" Value="#666666" />
        <Setter Property="FontFamily" Value="Helvetica,冬青黑简体"/>
    </Style>

    <!--圆角外框-->
    <ControlTemplate x:Key="Template_RoundRectButton" TargetType="Button">
        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="10" Padding="8,0,8,0">
            <ContentPresenter Content="{TemplateBinding ContentControl.Content}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="Template_RoundRectTextBox" TargetType="TextBox">
        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True" CornerRadius="10"
>
            <ScrollViewer x:Name="PART_ContentHost" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Padding="{TemplateBinding Padding}" Focusable="False" VerticalAlignment="Center"/>
        </Border>
    </ControlTemplate>

    <Style x:Key="STYLE_RoundRectTextBox" TargetType="TextBox">
        <Setter Property="Template" Value="{StaticResource Template_RoundRectTextBox}"/>
    </Style>

    <Style x:Key="STYLE_RoundRectButton" BasedOn="{StaticResource MetroButton}" TargetType="Button">
        <Setter Property="Height" Value="24" />
        <Setter Property="Foreground" Value="#03A9F4" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="#03A9F4"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Template" Value="{StaticResource Template_RoundRectButton}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="#ffffff" />
                <Setter Property="Background" Value="#03A9F4" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="STYLE_RoundRectBlueButton" BasedOn="{StaticResource MetroButton}" TargetType="Button">
        <Setter Property="Height" Value="24" />
        <Setter Property="Background" Value="#03A9F4" />
        <Setter Property="BorderBrush" Value="#03A9F4" />
        <Setter Property="Foreground" Value="WhiteSmoke"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Template" Value="{StaticResource Template_RoundRectButton}"/>
    </Style>

    <Style x:Key="STYLE_AlarmRectBlueButton" BasedOn="{StaticResource MetroButton}" TargetType="Button">
        <Setter Property="Height" Value="24" />
        <Setter Property="Background" Value="#03A9F4" />
        <Setter Property="BorderBrush" Value="#03A9F4" />
        <Setter Property="Foreground" Value="WhiteSmoke"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Template" Value="{StaticResource Template_RoundRectButton}"/>
        
    </Style>

    <Style x:Key="STYLE_NavigationButton" BasedOn="{StaticResource STYLE_Button}" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="#9d9d9d"/>
        <Style.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="#02a8f3" />
                <!--Setter Property="Background" Value="#03A9F4" /-->
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="#02a8f3" />
                <!--Setter Property="Background" Value="#03A9F4" /-->
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="STYLE_ConfirmDelButton" BasedOn="{StaticResource STYLE_Button}" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="2" />
        <Style.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="WhiteSmoke" />
                <Setter Property="Background" Value="#03A9F4" />
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="WhiteSmoke"/>
                <Setter Property="Background" Value="#03A9F4" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="STYLE_ConfirmSearchButton" BasedOn="{StaticResource STYLE_Button}" TargetType="Button">
        <Setter Property="Background" Value="#FFFFFF" />
        <Style.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="WhiteSmoke"/>
                <Setter Property="Background" Value="#03A9F4" />
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#03A9F4" />
                <Setter Property="Foreground" Value="WhiteSmoke"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="STYLE_STATUSLISTVIEW" BasedOn="{StaticResource VirtualisedMetroListView}" TargetType="ListView">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Foreground" Value="#666666" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="SelectedIndex" Value="0" />
        <Setter Property="Padding" Value="0" />
    </Style>

    <Style BasedOn="{StaticResource MetroListViewItem}" TargetType="ListViewItem">
        <Setter Property="Height" Value="20"/>
    </Style>

    <Style x:Key="STYLE_CONFIGVIEWTITLE" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Foreground" Value="#333333" />
    </Style>

    <!--Style x:Key="STYLE_CommonTextBox" BasedOn="{StaticResource MetroTextBox}" TargetType="{x:Type TextBox}">
        <Setter Property="MetroControls:TextBoxHelper.ClearTextButton" Value="True" />
        <Setter Property="MetroControls:TextBoxHelper.IsWaitingForData" Value="True" />
        <Setter Property="MaxLength" Value="20"/>
        <Setter Property="Input:InputMethod.IsInputMethodEnabled" Value="False" />
        <Style.Triggers>
            <Trigger Property="MetroControls:TextBoxHelper.HasText" Value="False">
                <Setter Property="MetroControls:TextBoxHelper.ClearTextButton" Value="False" />
            </Trigger>
            <Trigger Property="MetroControls:TextBoxHelper.HasText" Value="True">
                <Setter Property="MetroControls:TextBoxHelper.ClearTextButton" Value="True" />
            </Trigger>
        </Style.Triggers>
    </-->
    <Style x:Key="STYLE_CommonTextBox" BasedOn="{StaticResource MetroTextBox}" TargetType="{x:Type TextBox}">
        <Setter Property="MaxLength" Value="256"/>
        <Setter Property="Input:InputMethod.IsInputMethodEnabled" Value="False" />
        <Setter Property="MetroControls:TextBoxHelper.SelectAllOnFocus" Value="True" />
    </Style>

    <Style x:Key="STYLE_SearchTextBlock" TargetType="{x:Type TextBlock}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#03A9F4"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="STYLE_CommonComboBoxItem" BasedOn="{StaticResource MetroComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="MetroControls:TextBoxHelper.ClearTextButton" Value="True" />
        <Setter Property="MetroControls:TextBoxHelper.IsWaitingForData" Value="True" />
        <Setter Property="MetroControls:ComboBoxHelper.MaxLength" Value="10"/>
        <Setter Property="Input:InputMethod.IsInputMethodEnabled" Value="False" />
        <Style.Triggers>
            <Trigger Property="MetroControls:TextBoxHelper.HasText" Value="False">
                <Setter Property="MetroControls:TextBoxHelper.ClearTextButton" Value="False" />
            </Trigger>
            <Trigger Property="MetroControls:TextBoxHelper.HasText" Value="True">
                <Setter Property="MetroControls:TextBoxHelper.ClearTextButton" Value="True" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Style x:Key="STYLE_ChineseTextBox" BasedOn="{StaticResource MetroTextBox}" TargetType="{x:Type TextBox}">
        <Setter Property="MetroControls:TextBoxHelper.ClearTextButton" Value="True" />
        <Setter Property="MetroControls:TextBoxHelper.IsWaitingForData" Value="True" />
        <Setter Property="MaxLength" Value="100"/>
        <Style.Triggers>
            <Trigger Property="MetroControls:TextBoxHelper.HasText" Value="False">
                <Setter Property="MetroControls:TextBoxHelper.ClearTextButton" Value="False" />
            </Trigger>
            <Trigger Property="MetroControls:TextBoxHelper.HasText" Value="True">
                <Setter Property="MetroControls:TextBoxHelper.ClearTextButton" Value="True" />
            </Trigger>
        </Style.Triggers>
    </-->

    <Style x:Key="STYLE_ChineseTextBox" BasedOn="{StaticResource MetroTextBox}" TargetType="{x:Type TextBox}">
        <Setter Property="MaxLength" Value="100"/>
    </Style>

    <Style x:Key="STYLE_CommonPasswordBox" BasedOn="{StaticResource MetroButtonRevealedPasswordBox}" TargetType="{x:Type PasswordBox}">
        <Setter Property="MetroControls:TextBoxHelper.ClearTextButton" Value="True" />
        <Setter Property="MetroControls:TextBoxHelper.IsWaitingForData" Value="True" />
        <Setter Property="MaxLength" Value="20"/>
        <Setter Property="MetroControls:TextBoxHelper.Watermark" Value="请输入密码(默认密码123)"/>
        <Setter Property="MetroControls:PasswordBoxHelper.CapsLockIcon" Value="！"/>
        <Setter Property="MetroControls:PasswordBoxHelper.CapsLockWarningToolTip">
            <Setter.Value>
                <TextBlock>
                            <Run Foreground="Red"
                                 Text="CAPS LOCK"
                                 TextDecorations="Underline" />
                            <Run Text=" is on" />
                </TextBlock>
            </Setter.Value>
        </Setter>
        
        <Style.Triggers>
            <Trigger Property="MetroControls:TextBoxHelper.HasText" Value="False">
                <Setter Property="MetroControls:TextBoxHelper.ClearTextButton" Value="False" />
            </Trigger>
            <Trigger Property="MetroControls:TextBoxHelper.HasText" Value="True">
                <Setter Property="MetroControls:TextBoxHelper.ClearTextButton" Value="True" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="STYLE_GroupBox" BasedOn="{StaticResource MetroGroupBox}" TargetType="{x:Type GroupBox}">
        <Setter Property="Background" Value="#03A9F4" />
        <Setter Property="BorderBrush" Value="#03A9F4" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="MetroControls:ControlsHelper.HeaderFontSize" Value="12"/>
    </Style>

    <Style x:Key="MultiSelectTreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="1,0,0,0"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ToggleButton 
                                x:Name="Expander" 
                                ClickMode="Press" 
                                IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" 
                                Style="{StaticResource ExpandCollapseToggleStyle}"/>
                        <Border 
                                x:Name="Bd" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                Grid.Column="1" 
                                Padding="{TemplateBinding Padding}" 
                                SnapsToDevicePixels="true">
                            <ContentPresenter 
                                    x:Name="PART_Header" 
                                    ContentSource="Header" 
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ItemsPresenter 
                                x:Name="ItemsHost" 
                                Grid.ColumnSpan="2" 
                                Grid.Column="1" 
                                Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                        </Trigger>
                        <!--Trigger Property="IsSelected" Value="true"-->
                        <!--Trigger Property="Views:TreeViewEx.IsItemSelected" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <!--Condition Property="IsSelected" Value="true"/-->
                                <!--Condition Property="Views:TreeViewEx.IsItemSelected" Value="true"/-->
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="True">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ValidationTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel LastChildFill="True">
                        <TextBlock DockPanel.Dock="Right"
                                   Foreground="Red" FontSize="14" FontWeight="Bold"
                                   ToolTip="{Binding ElementName=adornerPlaceholder,
                                   Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
                             *
                        </TextBlock>
                        <Border BorderBrush="Red" BorderThickness="1" CornerRadius="3">
                            <AdornedElementPlaceholder Name="adornerPlaceholder"></AdornedElementPlaceholder>
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip"
                                Value="{Binding RelativeSource={RelativeSource Self},
                                Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>